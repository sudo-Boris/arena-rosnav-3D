<launch>
  <!-- simulator arguments-->
  <arg name="train_mode" default="false"/>
  <arg name="local_planner" default="teb"         doc = "local_planer type [teb, dwa, mpc, rlca, cadrl, drl]"/>
  <!--rlca are implemented but msg type not yet adjusted from 2D; dwa has a file missing (see project_task)-->
  <arg name="rviz_file" default="nav_LP"/>
  <arg name="disable_scenario" default="false"/>
  <arg name="reset" default="true"/> <!-- auto_reset for task generator -->
  <arg name="enable_pedsim" default="true"/>
  <arg name="enable_pedvis" default="true"/>
  <arg name="outside" default="false"/>
  <arg name="world" default="small_warehouse"   doc ="world type [turtlebot3_house, small_warehouse, aws_house, outside, ignc_lab]" unless="$(arg outside)"/>
  <arg name="world" default="outside"     if = "$(arg outside)"/>
  <arg name="model" default="burger"      doc = "model type [burger, waffle]"/>
  <arg name="scenario_file" default="$(arg world).json"/>
  <arg name="step_size" default="0.01"/>
  <arg name="update_rate" default="250"/>
  <arg name="show_viz" default="true"/>
  <arg name="viz_pub_rate" default="30" />
  <arg name="use_rviz" default="true"/>
  <arg name="map_path" default="$(find simulator_setup)/maps/$(arg world)/map.yaml" />
  <arg name="task_mode" default="scenario" doc="task_mode type [scenario, random, manual]"/>
  <arg name="actors" default="3"/>
  <arg name="actor_height" default="1.1"/>

  <param name="use_sim_time" value="true"/>
  <param name="train_mode" value="$(arg train_mode)" />
  <param name="world" value="$(arg world)" />
  <param name="model" value="$(arg model)" />
  <param name="update_rate" value="$(arg update_rate)" />
  <param name="step_size" value="$(arg step_size)" />
  <param name="show_viz" value="$(arg show_viz)"/>
  <param name="viz_pub_rate" value="$(arg viz_pub_rate)"/>
  <param name="use_rviz" value="$(arg use_rviz)"/>
  <param name="single_env" value="true"/>
  <param name="actor_height" value="$(arg actor_height)" unless="$(eval arg('world') == 'arena_generated')"/>
  <param name="actor_height" value="1.03" if="$(eval arg('world') == 'arena_generated')"/>

  <param name="robot_description" command="$(find xacro)/xacro $(find simulator_setup)/robot/urdf/turtlebot3_$(arg model).urdf.xacro" />

  <!-- the velocity of randomly genelized obstacles  -->
  <arg name="obs_vel" default="0.3" />
  <param name="obs_vel" value="$(arg obs_vel)" />


  <!--  PARAMS DON'T CHANGE THEM  -->
  <param name="robot_action_rate" value="10"/>
  <param name="laser_update_rate" value="10"/>


  <!-- DRL action frequency -->
  <arg name="action_frequency" default="10"/>
  <param name="action_frequency" value="$(arg action_frequency)"/>
  <param name="bool_goal_reached" value="true" />

  <!-- Map parameters -->
  <arg name="global_frame_id" value="map"/>
  <arg name="odom_frame_id" value="odom"/>
  <arg name="base_frame_id" value="base_footprint"/>
  <arg name="odom_ground_truth" default="/odometry/ground_truth"/>

  <!-- Adding actors to world  -->
  <node name="generate_world" pkg="task_generator" type="generate_world.py" if="$(arg enable_pedsim)">
    <param name="task_mode" value="$(arg task_mode)"/>
    <param name="actors" value="$(arg actors)"/>
    <param name="scenario_path" value="$(find simulator_setup)/scenarios/$(arg scenario_file)"/>
  </node>
  <!-- map server-->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_path)">
    <param name="frame_id" value="$(arg global_frame_id)"/>
  </node>

  <!-- use simulator-->
  <include file="$(find arena_bringup)/launch/sublaunch_testing/gazebo_simulator.launch">
    <arg name="world" value="$(arg world)"/>
    <arg name="model" value="$(arg model)"/>
    <arg name="show_viz" value="$(arg show_viz)"/>
    <arg name="use_rviz" value="$(arg use_rviz)"/>
    <arg name="rviz_file" value="$(arg rviz_file)"/>
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
  </node>

  <!-- AMCL -->
  <!-- <include file="$(find arena_bringup)/launch/amcl.launch">
    <arg name="drl" value="true"/>
  </include> -->

  <!-- use fake localization-->
  <include file="$(find arena_bringup)/launch/sublaunch_testing/fake_localization.launch">
    <arg name="global_frame_id" value="$(arg global_frame_id)"/>
    <arg name="odom_frame_id" value="$(arg odom_frame_id)"/>
  </include>

  <!-- start task_generator node -->
  <arg name="timeout" default="3.0"/>
  <arg name="drl" default="false"/>
  <include file="$(find arena_bringup)/launch/sublaunch_testing/task_generator.launch" unless="$(eval arg('disable_scenario') or arg('train_mode'))">
    <arg name="scenarios_json_path" value="$(find simulator_setup)/scenarios/$(arg scenario_file)"/>
    <arg name="auto_reset" value="$(arg reset)"/>
    <arg name="timeout" value="$(arg timeout)"/>
    <arg name="world" value="$(arg world)"/>
    <arg name="drl" value="$(arg drl)"/>
    <arg name="task_mode" value="$(arg task_mode)"/>
    <arg name="actors" value="$(arg actors)"/>
  </include>

  <include file="$(find arena_bringup)/launch/sublaunch_testing/sensor_sim.launch" unless="$(eval arg('disable_scenario') or arg('train_mode'))"/>

  <!-- move_base plan manager: which provide basic global planner and cost map -->
  <include file="$(find arena_bringup)/launch/sublaunch_testing/move_base/move_base_$(arg local_planner).launch"/>

  <include file="$(find arena_bringup)/launch/sublaunch_testing/plan_manager.launch">
    <!-- only train_mode is false, otherwise subgoal is identical with global goal
          which is not wanted for training the waypoint generator.
    -->
    <arg name="train_mode" value="$(arg train_mode)"/>
    <arg name="global_frame_id" value="$(arg global_frame_id)"/>
    <arg name="odom_frame_id" value="$(arg odom_frame_id)"/>
    <arg name="base_frame_id" value="$(arg base_frame_id)"/>
    <!-- make use also make the modification in the file start_arena_flatland_waypoint.launch -->
    <!-- look_ahead_distance + outer ring circle < len_laser_beam -->
    <arg name="look_ahead_distance" default="2.3"/>
    <!--meter, double -->
    <arg name="tolerance_approach" default="0.6"/>
    <!--meter, double -->
    <arg name="timeout_goal" default="330."/>
    <!--sec, double -->
    <arg name="timeout_subgoal" default="20"/>
    <!--sec, double -->
  </include>
  <include file="$(find arena_bringup)/launch/sublaunch_testing/intermediate_planner.launch"/>

  <!-- makes sure that drl actions will be published according to sim time in eval mode-->
  <!-- <group if="$(eval arg('train_mode') == false)">
    <node name="action_publisher" pkg="arena_local_planner_drl" type="action_publisher.py"/>
  </group> -->

  <!-- Pedsim -->
  <arg name="simulation_factor" default="1"/>
  <arg name="pedsim_update_rate" default="30.0"/>
  <arg name="scene_file" default="$(find simulator_setup)/scenarios/ped_scenarios/$(arg world).xml"/>

  <node name="pedsim_simulator" pkg="pedsim_simulator" type="pedsim_simulator" output="screen" if="$(arg enable_pedsim)">
    <param name="simulation_factor" value="$(arg simulation_factor)" type="double"/>
    <param name="pedsim_update_rate" value="$(arg pedsim_update_rate)" type="double"/>
    <param name="scene_file" value="$(arg scene_file)" type="string"/>
  </node>

  <node name="pedsim_visualizer" type="pedsim_visualizer_node" pkg="pedsim_visualizer" output="screen" if="$(arg enable_pedvis)"/>


</launch>